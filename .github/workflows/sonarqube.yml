name: SonarQube Analysis

on:
  schedule:
    - cron: '0 6 * * 1'  # Her Pazartesi saat 06:00'da çalıştır
  workflow_dispatch: # Manuel çalıştırmak için
env: 
  ACCESS_TOKEN: ${{ secrets.AZURE_ARTIFACTS_ACCESSTOKEN }} 
  ACCESS_TOKEN_HANGFIRE: ${{ secrets.ACCESS_TOKEN_HANGFIRE }} 

jobs:
  sonarqube:
    name: SonarQube Code Analysis
    runs-on: [self-hosted, pw-hc-runner]  # Runner etiketi burada doğru olmalı

    steps:
      - name: Check Team Membership
        id: check_team
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_SECRET }}
          TEAM_SLUG: 'reviewers' 
          ORG_NAME: 'paywallone' 
        run: |
          ACTOR="${{ github.actor }}"
          TEAM_MEMBERSHIP_RESPONSE=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/$ORG_NAME/teams/$TEAM_SLUG/memberships/$ACTOR")
            echo "$TEAM_MEMBERSHIP_RESPONSE"
          if echo "$TEAM_MEMBERSHIP_RESPONSE" | grep -q '"state": "active"'; then
            echo "Actor $ACTOR is a member of the team."
            echo "::set-output name=is_member::true"
          else
            echo "Actor $ACTOR is NOT a member of the team."
            echo "::set-output name=is_member::false"
            exit 1
          fi
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarQube'un analiz için tüm geçmişe ihtiyacı olabilir

      - name: Install .NET SDK
        run: |
          echo ${{ github.event.repository.name }}
          sudo dnf install -y dotnet-sdk-8.0  # Versiyon ihtiyacına göre değiştir

      - name: Install SonarScanner for .NET
        run: |
          dotnet tool update --global dotnet-sonarscanner

      - name: Run SonarQube Analysis
        run: |
          export PATH="$HOME/.dotnet/tools:$PATH"
          dotnet-sonarscanner begin /k:"${{ github.event.repository.name }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          dotnet build
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"